Archive member included because of file (symbol)

/usr/lib/gcc/avr/3.4.6/avr5/libgcc.a(_udivmodsi4.o)
                              rf12.o (__udivmodsi4)
/usr/lib/gcc/avr/3.4.6/avr5/libgcc.a(_divmodsi4.o)
                              rf12.o (__divmodsi4)
/usr/lib/gcc/avr/3.4.6/avr5/libgcc.a(_prologue.o)
                              main.o (__prologue_saves__)
/usr/lib/gcc/avr/3.4.6/avr5/libgcc.a(_epilogue.o)
                              main.o (__epilogue_restores__)
/usr/lib/gcc/avr/3.4.6/avr5/libgcc.a(_copy_data.o)
                              main.o (__do_copy_data)
/usr/lib/gcc/avr/3.4.6/avr5/libgcc.a(_clear_bss.o)
                              main.o (__do_clear_bss)

Allocating common symbols
Common symbol       size              file

UART_Tx_Ring_Size   0x1               uart.o
UART_Rx_Index       0x1               uart.o
RF12_status         0x1               rf12.o
RF12_Data           0x6e              rf12.o
UART_Buffer         0x40              uart.o
UART_Tx_Ring_rxptr  0x1               uart.o
UART_Rx_Cmd         0x1               uart.o
UART_Rx_Buffer      0x20              uart.o
UART_Tx_Ring_txptr  0x1               uart.o
UART_Tx_Buffer      0x20              uart.o

Memory Configuration

Name             Origin             Length             Attributes
text             0x0000000000000000 0x0000000000020000 xr
data             0x0000000000800060 0x000000000000ffa0 rw !x
eeprom           0x0000000000810000 0x0000000000010000 rw !x
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

Address of section .data set to 0x800100
LOAD /usr/lib/gcc/avr/3.4.6/../../../../avr/lib/avr5/crtm32.o
LOAD main.o
LOAD rf12.o
LOAD uart.o
LOAD /usr/lib/gcc/avr/3.4.6/../../../../avr/lib/avr5/libm.a
LOAD /usr/lib/gcc/avr/3.4.6/avr5/libgcc.a
LOAD /usr/lib/gcc/avr/3.4.6/../../../../avr/lib/avr5/libc.a
LOAD /usr/lib/gcc/avr/3.4.6/avr5/libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x0000000000000000      0x868
 *(.vectors)
 .vectors       0x0000000000000000       0x54 /usr/lib/gcc/avr/3.4.6/../../../../avr/lib/avr5/crtm32.o
                0x0000000000000000                __vectors
                0x0000000000000000                __vector_default
                0x0000000000000054                __ctors_start = .
 *(.ctors)
                0x0000000000000054                __ctors_end = .
                0x0000000000000054                __dtors_start = .
 *(.dtors)
                0x0000000000000054                __dtors_end = .
 *(.progmem.gcc*)
 *(.progmem*)
                0x0000000000000054                . = ALIGN (0x2)
 *(.init0)
 *(.init1)
 *(.init2)
 .init2         0x0000000000000054        0xc /usr/lib/gcc/avr/3.4.6/../../../../avr/lib/avr5/crtm32.o
 *(.init3)
 *(.init4)
 .init4         0x0000000000000060       0x16 /usr/lib/gcc/avr/3.4.6/avr5/libgcc.a(_copy_data.o)
                0x0000000000000060                __do_copy_data
 .init4         0x0000000000000076       0x10 /usr/lib/gcc/avr/3.4.6/avr5/libgcc.a(_clear_bss.o)
                0x0000000000000076                __do_clear_bss
 *(.init5)
 *(.init6)
 *(.init7)
 *(.init8)
 *(.init9)
 .init9         0x0000000000000086        0x4 /usr/lib/gcc/avr/3.4.6/../../../../avr/lib/avr5/crtm32.o
 *(.text)
 .text          0x000000000000008a        0x4 /usr/lib/gcc/avr/3.4.6/../../../../avr/lib/avr5/crtm32.o
                0x000000000000008a                __vector_12
                0x000000000000008a                __bad_interrupt
                0x000000000000008a                __vector_6
                0x000000000000008a                __vector_3
                0x000000000000008a                __vector_11
                0x000000000000008a                __vector_17
                0x000000000000008a                __vector_19
                0x000000000000008a                __vector_7
                0x000000000000008a                __vector_5
                0x000000000000008a                __vector_4
                0x000000000000008a                __vector_9
                0x000000000000008a                __vector_2
                0x000000000000008a                __vector_15
                0x000000000000008a                __vector_8
                0x000000000000008a                __vector_10
                0x000000000000008a                __vector_16
                0x000000000000008a                __vector_18
                0x000000000000008a                __vector_20
 .text          0x000000000000008e       0xb2 main.o
                0x000000000000008e                send
                0x00000000000000da                main
 .text          0x0000000000000140      0x512 rf12.o
                0x0000000000000508                rf12_txstart
                0x00000000000001a0                __vector_1
                0x0000000000000170                rf12_trans
                0x0000000000000140                crcUpdate
                0x000000000000031c                rf12_setbandwidth
                0x0000000000000442                rf12_rxfinish
                0x0000000000000622                rf12_txfinished
                0x000000000000035a                rf12_setfreq
                0x00000000000003c4                rf12_setpower
                0x0000000000000636                rf12_allstop
                0x00000000000002a0                rf12_init
                0x00000000000003ec                rf12_rxstart
                0x000000000000037a                rf12_setbaud
 .text          0x0000000000000652      0x12e uart.o
                0x00000000000006fc                UART_Tx_Str
                0x0000000000000758                UART_Init
                0x0000000000000652                __vector_13
                0x00000000000006ac                __vector_14
                0x0000000000000780                . = ALIGN (0x2)
 *(.text.*)
 .text.libgcc   0x0000000000000780       0x44 /usr/lib/gcc/avr/3.4.6/avr5/libgcc.a(_udivmodsi4.o)
                0x0000000000000780                __udivmodsi4
 .text.libgcc   0x00000000000007c4       0x36 /usr/lib/gcc/avr/3.4.6/avr5/libgcc.a(_divmodsi4.o)
                0x00000000000007c4                __divmodsi4
 .text.libgcc   0x00000000000007fa       0x38 /usr/lib/gcc/avr/3.4.6/avr5/libgcc.a(_prologue.o)
                0x00000000000007fa                __prologue_saves__
 .text.libgcc   0x0000000000000832       0x36 /usr/lib/gcc/avr/3.4.6/avr5/libgcc.a(_epilogue.o)
                0x0000000000000832                __epilogue_restores__
                0x0000000000000868                . = ALIGN (0x2)
 *(.fini9)
 *(.fini8)
 *(.fini7)
 *(.fini6)
 *(.fini5)
 *(.fini4)
 *(.fini3)
 *(.fini2)
 *(.fini1)
 *(.fini0)
                0x0000000000000868                _etext = .

.data           0x0000000000800100       0x38 load address 0x0000000000000868
                0x0000000000800100                PROVIDE (__data_start, .)
 *(.data)
 .data          0x0000000000800100       0x38 main.o
 *(.gnu.linkonce.d*)
                0x0000000000800138                . = ALIGN (0x2)
                0x0000000000800138                _edata = .
                0x0000000000800138                PROVIDE (__data_end, .)

.bss            0x0000000000800138       0xf5
                0x0000000000800138                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x0000000000800138        0x1 rf12.o
                0x0000000000800138                RF12_Index
 *(COMMON)
 COMMON         0x0000000000800139       0x6f rf12.o
                0x0000000000800139                RF12_status
                0x000000000080013a                RF12_Data
 COMMON         0x00000000008001a8       0x85 uart.o
                0x00000000008001a8                UART_Tx_Ring_Size
                0x00000000008001a9                UART_Rx_Index
                0x00000000008001aa                UART_Buffer
                0x00000000008001ea                UART_Tx_Ring_rxptr
                0x00000000008001eb                UART_Rx_Cmd
                0x00000000008001ec                UART_Rx_Buffer
                0x000000000080020c                UART_Tx_Ring_txptr
                0x000000000080020d                UART_Tx_Buffer
                0x000000000080022d                PROVIDE (__bss_end, .)
                0x0000000000000868                __data_load_start = LOADADDR (.data)
                0x00000000000008a0                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x000000000080022d        0x0
                0x000000000080022d                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x000000000080022d                PROVIDE (__noinit_end, .)
                0x000000000080022d                _end = .
                0x000000000080022d                PROVIDE (__heap_start, .)

.eeprom         0x0000000000810000        0x0
 *(.eeprom*)
                0x0000000000810000                __eeprom_end = .

.stab           0x0000000000000000      0x36c
 *(.stab)
 .stab          0x0000000000000000      0x36c /usr/lib/gcc/avr/3.4.6/../../../../avr/lib/avr5/crtm32.o

.stabstr        0x0000000000000000       0xb0
 *(.stabstr)
 .stabstr       0x0000000000000000       0xb0 /usr/lib/gcc/avr/3.4.6/../../../../avr/lib/avr5/crtm32.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment
 *(.comment)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)
OUTPUT(project.out elf32-avr)
